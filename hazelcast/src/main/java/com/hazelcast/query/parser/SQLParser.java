/* Generated By:JavaCC: Do not edit this line. SQLParser.java */
package com.hazelcast.query.parser;
import com.hazelcast.query.Predicate;
import com.hazelcast.query.Predicates;
import java.io.StringReader;
import java.io.Reader;
import java.util.ArrayList;


public class SQLParser implements SQLParserConstants {
    public SQLParser(String s)
    {
        this((Reader)(new StringReader(s)));
    }

    public static Predicate predicate;
    public Predicate getPredicate()
    {
        return predicate;
    }

    public static void main(String args[]) {
    try {
      new SQLParser(System.in).Lexer();
    }
    catch(ParseException e) {
      System.out.println("Parse fail");
    }
    }

  final public Predicate Lexer() throws ParseException {
    trace_call("Lexer");
    try {
Predicate p;
      label_1:
      while (true) {
        p = expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
        case LPAREN:
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
  {if (true) return p;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Lexer");
    }
  }

  final public Predicate expression() throws ParseException {
    trace_call("expression");
    try {
Predicate p;
      if (jj_2_1(2147483647)) {
        p = inPredicate();
        System.out.println(p);
        {if (true) return p;}
      } else if (jj_2_2(2147483647)) {
        p = betweenPredicate();
        System.out.println(p);
        {if (true) return p;}
      } else if (jj_2_3(2147483647)) {
        p = andPredicate();
        System.out.println(p);
        {if (true) return p;}
      } else if (jj_2_4(2147483647)) {
        p = orPredicate();
        System.out.println(p);
        {if (true) return p;}
      } else if (jj_2_5(2147483647)) {
        p = notPredicate();
        System.out.println(p);
        {if (true) return p;}
      } else if (jj_2_6(2147483647)) {
        p = notInsidePredicate();
        System.out.println(p);
        {if (true) return p;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case ID:
          p = predicate();
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case AND:
            case OR:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case AND:
              jj_consume_token(AND);
              break;
            case OR:
              jj_consume_token(OR);
              break;
            default:
              jj_la1[2] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            predicate();
          }
              {if (true) return p;}
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expression");
    }
  }

  final public Predicate andPredicate() throws ParseException {
    trace_call("andPredicate");
    try {
Predicate p1;
Predicate p2;
      p1 = predicate();
      jj_consume_token(AND);
      p2 = predicate();
        {if (true) return new Predicates.AndPredicate(p1,p2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("andPredicate");
    }
  }

  final public Predicate notPredicate() throws ParseException {
    trace_call("notPredicate");
    try {
Predicate p1;
      jj_consume_token(NOT);
      p1 = predicate();
        {if (true) return new Predicates.NotPredicate(p1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("notPredicate");
    }
  }

  final public Predicate notInsidePredicate() throws ParseException {
    trace_call("notInsidePredicate");
    try {
Token field;
Predicate p1;
Token value;
ArrayList<Comparable> values;
      field = jj_consume_token(ID);
      jj_consume_token(NOT);
      if (jj_2_7(2147483647)) {
        jj_consume_token(LIKE);
        value = value();
        p1 = new Predicates.LikePredicate(field.image,value.image);
        {if (true) return new Predicates.NotPredicate(p1);}
      } else if (jj_2_8(2147483647)) {
        jj_consume_token(REGEX);
        value = value();
        p1 = new Predicates.RegexPredicate(field.image,value.image);
        {if (true) return new Predicates.NotPredicate(p1);}
      } else if (jj_2_9(2147483647)) {
        jj_consume_token(IN);
        jj_consume_token(LPAREN);
        values = listOfValues();
        jj_consume_token(RPAREN);
        p1 = new Predicates.InPredicate(field.image,values.toArray(new Comparable[values.size()]));
        {if (true) return new Predicates.NotPredicate(p1);}
      } else if (jj_2_10(2147483647)) {
        jj_consume_token(BETWEEN);
     Token value1;Token value2;
        value1 = value();
        jj_consume_token(AND);
        value2 = value();
        p1 = new Predicates.BetweenPredicate(field.image,value1.image,value2.image);
        {if (true) return new Predicates.NotPredicate(p1);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("notInsidePredicate");
    }
  }

  final public Predicate orPredicate() throws ParseException {
    trace_call("orPredicate");
    try {
Predicate p1;
Predicate p2;
      p1 = predicate();
      jj_consume_token(OR);
      p2 = predicate();
        {if (true) return new Predicates.OrPredicate(p1,p2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("orPredicate");
    }
  }

  final public Predicate predicate() throws ParseException {
    trace_call("predicate");
    try {
Predicate predicate;
      if (jj_2_11(2147483647)) {
        predicate = equalPredicate();
          {if (true) return predicate;}
      } else if (jj_2_12(2147483647)) {
        predicate = notEqualPredicate();
          {if (true) return predicate;}
      } else if (jj_2_13(2147483647)) {
        predicate = greaterThanPredicate();
          {if (true) return predicate;}
      } else if (jj_2_14(2147483647)) {
        predicate = greaterThanEqualPredicate();
          {if (true) return predicate;}
      } else if (jj_2_15(2147483647)) {
        predicate = lesserThanPredicate();
          {if (true) return predicate;}
      } else if (jj_2_16(2147483647)) {
        predicate = lesserThanEqualPredicate();
          {if (true) return predicate;}
      } else if (jj_2_17(2147483647)) {
        predicate = likePredicate();
          {if (true) return predicate;}
      } else if (jj_2_18(2147483647)) {
        predicate = iLikePredicate();
          {if (true) return predicate;}
      } else if (jj_2_19(2147483647)) {
        predicate = regexPredicate();
          {if (true) return predicate;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          predicate = expression();
          jj_consume_token(RPAREN);
         {if (true) return predicate;}
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("predicate");
    }
  }

  final public Predicate equalPredicate() throws ParseException {
    trace_call("equalPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(EQUALS);
      value = value();
    predicate = new Predicates.EqualPredicate(field.image,value.image);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("equalPredicate");
    }
  }

  final public Predicate notEqualPredicate() throws ParseException {
    trace_call("notEqualPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(NOTEQUAL);
      value = value();
    predicate =  new Predicates.NotEqualPredicate(field.image,value.image);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("notEqualPredicate");
    }
  }

  final public Predicate greaterThanPredicate() throws ParseException {
    trace_call("greaterThanPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(GREATER);
      value = value();
    predicate =  new Predicates.GreaterLessPredicate(field.image,value.image,false,false);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("greaterThanPredicate");
    }
  }

  final public Predicate greaterThanEqualPredicate() throws ParseException {
    trace_call("greaterThanEqualPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(GREATER_EQ);
      value = value();
    predicate =  new Predicates.GreaterLessPredicate(field.image,value.image,true,false);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("greaterThanEqualPredicate");
    }
  }

  final public Predicate lesserThanPredicate() throws ParseException {
    trace_call("lesserThanPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(LESSER);
      value = value();
    predicate = new Predicates.GreaterLessPredicate(field.image,value.image,false,true);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lesserThanPredicate");
    }
  }

  final public Predicate lesserThanEqualPredicate() throws ParseException {
    trace_call("lesserThanEqualPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(LESSER_EQ);
      value = value();
    predicate = new Predicates.GreaterLessPredicate(field.image,value.image,true,true);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lesserThanEqualPredicate");
    }
  }

  final public Predicate likePredicate() throws ParseException {
    trace_call("likePredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(LIKE);
      value = value();
    predicate = new Predicates.LikePredicate(field.image,value.image);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("likePredicate");
    }
  }

  final public Predicate iLikePredicate() throws ParseException {
    trace_call("iLikePredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(ILIKE);
      value = value();
    predicate = new Predicates.ILikePredicate(field.image,value.image);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("iLikePredicate");
    }
  }

  final public Predicate inPredicate() throws ParseException {
    trace_call("inPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
 ArrayList<Comparable> values=null;
      field = jj_consume_token(ID);
      jj_consume_token(IN);
      jj_consume_token(LPAREN);
      values = listOfValues();
      jj_consume_token(RPAREN);
    predicate = new Predicates.InPredicate(field.image,values.toArray(new Comparable[values.size()]));
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("inPredicate");
    }
  }

  final public Predicate regexPredicate() throws ParseException {
    trace_call("regexPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value=null;
      field = jj_consume_token(ID);
      jj_consume_token(REGEX);
      value = value();
    predicate = new Predicates.RegexPredicate(field.image,value.image);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("regexPredicate");
    }
  }

  final public Predicate betweenPredicate() throws ParseException {
    trace_call("betweenPredicate");
    try {
 Token field=null;
 Predicate predicate=null;
 Token value1=null;
 Token value2=null;
      field = jj_consume_token(ID);
      jj_consume_token(BETWEEN);
      value1 = value();
      jj_consume_token(AND);
      value2 = value();
    predicate = new Predicates.BetweenPredicate(field.image,value1.image,value2.image);
    {if (true) return predicate;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("betweenPredicate");
    }
  }

  final public ArrayList listOfValues() throws ParseException {
    trace_call("listOfValues");
    try {
ArrayList values = new ArrayList();
Token val = null;
      val = value();
                    values.add(val.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 30:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(30);
        val = value();
                                                              values.add(val.image);
      }
        {if (true) return values;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("listOfValues");
    }
  }

  final public Token value() throws ParseException {
    trace_call("value");
    try {
Token val;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        val = jj_consume_token(ID);
            {if (true) return val;}
        break;
      case QUOTED_STRING:
        val = jj_consume_token(QUOTED_STRING);
                         val.image=clearQuotes(val.image);{if (true) return val;}
        break;
      case SINGLE_QUOTED_STRING:
        val = jj_consume_token(SINGLE_QUOTED_STRING);
                                val.image=clearQuotes(val.image);{if (true) return val;}
        break;
      case NUM:
        val = jj_consume_token(NUM);
               {if (true) return val;}
        break;
      case FLOAT:
        val = jj_consume_token(FLOAT);
                 {if (true) return val;}
        break;
      case NULL:
        val = jj_consume_token(NULL);
                val.image = null;{if (true) return val;}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("value");
    }
  }

  final public String clearQuotes(String value) throws ParseException {
    trace_call("clearQuotes");
    try {
     {if (true) return value.substring(1,value.length()-1);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("clearQuotes");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(REGEX)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(REGEX)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ILIKE)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(NOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LESSER_EQ)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LESSER_EQ)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LESSER)) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(GREATER_EQ)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(NOTEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LESSER)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) return true;
    }
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(REGEX)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(GREATER_EQ)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_4()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(GREATER)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ILIKE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(BETWEEN)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(NOTEQUAL)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(REGEX)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(SINGLE_QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(LIKE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x420008,0x6,0x6,0x420000,0x20000,0x40000000,0x3f00000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SQLParser(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
